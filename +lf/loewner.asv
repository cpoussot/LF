% Syntax
% [hr,Hr,sv,LL,SS] = loewner(la,mu,W,V,R,L,robj)
%  
% Input arguments
%  - la   : interpolation points (k x 1, complex)
%  - mu   : interpolation points (q x 1, complex)
%  - W    : n1-dimensional ny x nu structure of the function/data 
%           evaluated at points "la" (ny x nu x k, complex)
%           W = H(la), where H(.) is the underlying model
%  - V    : n2-dimensional ny x nu structure of the function/data  
%           evaluated at points "mu" (ny x nu x q, complex)
%           V = H(mu), where H(.) is the underlying model
%  - R    : right tangential directions (ny x k, complex)
%  - L    : left tangential directions (q x nu, complex)
%  - robj : rational order (if integer >=1), SVD tolerance (if real <1)
% 
% Output arguments
%  - hr   : approximation (handle function)
%  - info : structure with a lot of informations about the Loewner world
%    * r        : rational order
%    * la       : lambda's (column interpolation points)
%    * mu       : mu's (row interpolation points)
%    * sv       : normalized singular values of [LL SS]
%    * LL       : Loewner matrix (n2 x n1 real)
%    * SS       : shifted Loewner matrix (n2 x n1 real)
%    * lar      : compressed column (right) interpolation points
%    * mur      : compressed row (left) interpolation points
%    * E,A,B,C,D: H(s)=C(sE-A)\B+D
% 
% Description
% Loewner rules
% 

function [hr,info] = loewner(la_,mu_,W_,V_,R,L,robj,D)

TOL_SV  = 1e-13;
TOL_CC  = 1e-13;
%
if nargin < 8
    D = 0;
end
%
k           = length(la_);
q           = length(mu_);
[ny,nu,~]   = size(W_);
% 
isCC = false;
if (abs(sum(imag(la_.')))<TOL_CC) && ...
   (abs(sum(imag(mu_.')))<TOL_CC) && ...
   (q==k)
    isCC = true;
end

%%% Reshape data
W   = zeros(ny,k);
V   = zeros(q,nu);
for ii = 1:k
    W(1:ny,ii) = W_(:,:,ii)*R(:,ii);
end
for ii = 1:q
    V(ii,1:nu) = L(ii,:)*V_(:,:,ii);
end

%%% Loewner matrices
LL  = zeros(q,k);
SS  = LL;
for ii = 1:q
    for jj = 1:k
        num1        = V(ii,:)*R(:,jj) - L(ii,:)*W(:,jj);
        num2        = mu_(ii)*V(ii,:)*R(:,jj) - L(ii,:)*W(:,jj)*la_(jj);
        den         = mu_(ii)-la_(jj);
        LL(ii,jj)   = num1/den;
        SS(ii,jj)   = num2/den;
    end
end

%%% D-term
if ~norm(D) == 0
    L   = ones(q,1);
    R   = ones(1,k);
    SS  = (SS - L*D*R);
    V   = V - L*D;
    W   = W - D*R;
else 
    D = zeros(ny,nu);
end

%%% Go real
if isCC
    J0  = (1/sqrt(2))*[1 1i; 1 -1i];
    J   = [];
    kk  = 1;
    while length(J) < length(la_)
        if imag(la_(kk)) == 0
            J   = blkdiag(J,1);
            kk  = kk + 1;
        else
            J   = blkdiag(J,J0);
            kk  = kk + 2;
        end
    end
    LL  = real(J'*LL*J);
    SS  = real(J'*SS*J);
    V   = real(J'*V);
    W   = real(W*J);
end

%%% Truncate
[L1,S1,~]   = svd([LL,SS],'econ','vector');
[~,S2,R2]   = svd([SS',LL']','econ','vector');
S_nu        = svd(LL,'econ','vector');
sv          = S1/S1(1,1);
sv_nu       = S_nu/S_nu(1,1);
nu          = sum(sv_nu>TOL_SV);
if isempty(robj) | isinf(robj)
    r   = sum(sv>TOL_SV);
elseif robj < 1
    r   = sum(sv>robj);
elseif robj >= 1
    r   = robj;
end
Y   = L1(:,1:r);
X   = R2(:,1:r);
Er  = -Y'*LL*X;
Ar  = -Y'*SS*X;
Br  = Y'*V;
Cr  = W*X;
Dr  = D;

%%% Output
hr  = @(s) Cr*((Er*s-Ar)\Br) + Dr;
H   = dss(-SS,V,W,Dr,-LL);
Hr  = dss(Ar,Br,Cr,Dr,Er);

%%% Compressed IP
Lr          = Y'*L;
Rr          = R*X;
[Tla,ipR,~] = eig(Ar+Br*Rr,Er);
[~,ipL,Tmu] = eig(Ar+Lr*Cr,Er);
ipR         = diag(ipR);
ipL         = diag(ipL);
LLt         = Tmu*Er*Tla
SSt         = Tmu*Ar*Tla
Vt          = Tmu*Br; % "-"?
Wt          = Cr*Tla; % "-"?
Lt          = Tmu*Lr;
Rt          = Rr*Tla;
eig(LLt\())
%%% Information
% Loewner
info.r      = r;
info.nu     = nu;
info.isCC   = isCC;
info.la     = la_(:);
info.mu     = mu_(:);
info.sv     = sv;
info.sv_nu  = sv_nu;
info.LL     = LL; 
info.SS     = SS;
% Barycentric form
info.lar    = ipR;
info.mur    = ipL;
info.wr     = Wt./Rt;%-(W*X*Tla)./(R*X*Tla);
info.vr     = Vt./Lt;%-(Tmu*Y'*V)./(Tmu*Y'*L);
% State-space form
info.Er     = Er;
info.Ar     = Ar;
info.Br     = Br;
info.Cr     = Cr;
info.Dr     = Dr;
info.H      = H;
info.Hr     = Hr;
